/*
 * Copyright 2022 Computer Systems Department, Jozef Stefan Insitute
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package lbir;
import "qtensor.proto";
import "scalapb/scalapb.proto";

option java_multiple_files = true;
option java_package = "lbir";
option (scalapb.options) = {
    // All classes that extend a sealed trait need to be in the same Scala
    // file, so we set single_file to true.
    single_file: true

    // Generate the base trait.
    preamble: [
      "sealed trait HasInputOutputQTensor {",
      "  def input: QTensor",
      "  def output: QTensor",
      "}",
      " ",
      "sealed trait IsActiveLayer extends HasInputOutputQTensor {",
      "  def kernel: QTensor",
      "  def thresh: QTensor",
      "  def activation: Activation",
      "}"
    ];
  };

message Model {
    string name = 1;
    repeated LayerWrap layers = 2;
    bool input_channel_first = 3;
}


enum Activation {
    BINARY_SIGN = 0;
    RELU = 1;
    NO_ACTIVATION = 2;
}

message LayerWrap {
    option (scalapb.message).sealed_oneof_extends = "HasInputOutputQTensor";
    oneof sealed_value_optional {
        DenseConfig dense = 1;
        Conv2DConfig conv2d = 2;
        MaxPool2DConfig maxpool2d = 3;
        FFTConfig fft = 4;
        LMFEConfig lmfe = 5; // Log-Mel Feature Energies
    }
}

message DenseConfig {
    option (scalapb.message).extends = "IsActiveLayer";
    QTensor thresh  = 1;
    QTensor kernel = 2;
    QTensor input = 3;
    QTensor output = 4;
    Activation activation = 5;
}

message Conv2DConfig {
    option (scalapb.message).extends = "IsActiveLayer";
    QTensor thresh  = 1;
    QTensor kernel = 2;
    QTensor input = 3;
    QTensor output = 4;
    Activation activation = 5;
    bool depthwise = 7;
}

message MaxPool2DConfig {
    QTensor input = 1;
    QTensor output = 2;
}


message FFTConfig {
    uint32 fft_size = 1;
    uint32 num_frames = 2;
    repeated float win_fn = 3;
    QTensor input = 4;
    QTensor output = 5;
}

message LMFEConfig {
    uint32 fft_size = 1;
    uint32 num_mels = 2;
    uint32 num_frames = 3;
    QTensor input = 4;
    QTensor output = 5;
    repeated float mel_filters = 6;
}

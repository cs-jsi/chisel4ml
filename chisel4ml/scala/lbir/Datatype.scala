// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package lbir

@SerialVersionUID(0L)
final case class Datatype(
    quantization: lbir.Datatype.QuantizationType = lbir.Datatype.QuantizationType.UNIFORM,
    bitwidth: _root_.scala.Int = 0,
    scale: _root_.scala.Float = 0.0f,
    offset: _root_.scala.Float = 0.0f,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Datatype] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = quantization.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      
      {
        val __value = bitwidth
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, __value)
        }
      };
      
      {
        val __value = scale
        if (__value != 0.0f) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(3, __value)
        }
      };
      
      {
        val __value = offset
        if (__value != 0.0f) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = quantization.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      {
        val __v = bitwidth
        if (__v != 0) {
          _output__.writeUInt32(2, __v)
        }
      };
      {
        val __v = scale
        if (__v != 0.0f) {
          _output__.writeFloat(3, __v)
        }
      };
      {
        val __v = offset
        if (__v != 0.0f) {
          _output__.writeFloat(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withQuantization(__v: lbir.Datatype.QuantizationType): Datatype = copy(quantization = __v)
    def withBitwidth(__v: _root_.scala.Int): Datatype = copy(bitwidth = __v)
    def withScale(__v: _root_.scala.Float): Datatype = copy(scale = __v)
    def withOffset(__v: _root_.scala.Float): Datatype = copy(offset = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = quantization.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = bitwidth
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = scale
          if (__t != 0.0f) __t else null
        }
        case 4 => {
          val __t = offset
          if (__t != 0.0f) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(quantization.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PInt(bitwidth)
        case 3 => _root_.scalapb.descriptors.PFloat(scale)
        case 4 => _root_.scalapb.descriptors.PFloat(offset)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = lbir.Datatype
    // @@protoc_insertion_point(GeneratedMessage[chisel4ml.Datatype])
}

object Datatype extends scalapb.GeneratedMessageCompanion[lbir.Datatype] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[lbir.Datatype] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): lbir.Datatype = {
    var __quantization: lbir.Datatype.QuantizationType = lbir.Datatype.QuantizationType.UNIFORM
    var __bitwidth: _root_.scala.Int = 0
    var __scale: _root_.scala.Float = 0.0f
    var __offset: _root_.scala.Float = 0.0f
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __quantization = lbir.Datatype.QuantizationType.fromValue(_input__.readEnum())
        case 16 =>
          __bitwidth = _input__.readUInt32()
        case 29 =>
          __scale = _input__.readFloat()
        case 37 =>
          __offset = _input__.readFloat()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    lbir.Datatype(
        quantization = __quantization,
        bitwidth = __bitwidth,
        scale = __scale,
        offset = __offset,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[lbir.Datatype] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      lbir.Datatype(
        quantization = lbir.Datatype.QuantizationType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(lbir.Datatype.QuantizationType.UNIFORM.scalaValueDescriptor).number),
        bitwidth = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        scale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f),
        offset = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = LbirProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = LbirProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => lbir.Datatype.QuantizationType
    }
  }
  lazy val defaultInstance = lbir.Datatype(
    quantization = lbir.Datatype.QuantizationType.UNIFORM,
    bitwidth = 0,
    scale = 0.0f,
    offset = 0.0f
  )
  sealed abstract class QuantizationType(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = QuantizationType
    def isUniform: _root_.scala.Boolean = false
    def isBinary: _root_.scala.Boolean = false
    def isTernary: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[QuantizationType] = lbir.Datatype.QuantizationType
    final def asRecognized: _root_.scala.Option[lbir.Datatype.QuantizationType.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[lbir.Datatype.QuantizationType.Recognized])
  }
  
  object QuantizationType extends _root_.scalapb.GeneratedEnumCompanion[QuantizationType] {
    sealed trait Recognized extends QuantizationType
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[QuantizationType] = this
    @SerialVersionUID(0L)
    case object UNIFORM extends QuantizationType(0) with QuantizationType.Recognized {
      val index = 0
      val name = "UNIFORM"
      override def isUniform: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object BINARY extends QuantizationType(1) with QuantizationType.Recognized {
      val index = 1
      val name = "BINARY"
      override def isBinary: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object TERNARY extends QuantizationType(3) with QuantizationType.Recognized {
      val index = 2
      val name = "TERNARY"
      override def isTernary: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends QuantizationType(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(UNIFORM, BINARY, TERNARY)
    def fromValue(__value: _root_.scala.Int): QuantizationType = __value match {
      case 0 => UNIFORM
      case 1 => BINARY
      case 3 => TERNARY
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = lbir.Datatype.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = lbir.Datatype.scalaDescriptor.enums(0)
  }
  implicit class DatatypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, lbir.Datatype]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, lbir.Datatype](_l) {
    def quantization: _root_.scalapb.lenses.Lens[UpperPB, lbir.Datatype.QuantizationType] = field(_.quantization)((c_, f_) => c_.copy(quantization = f_))
    def bitwidth: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.bitwidth)((c_, f_) => c_.copy(bitwidth = f_))
    def scale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.scale)((c_, f_) => c_.copy(scale = f_))
    def offset: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.offset)((c_, f_) => c_.copy(offset = f_))
  }
  final val QUANTIZATION_FIELD_NUMBER = 1
  final val BITWIDTH_FIELD_NUMBER = 2
  final val SCALE_FIELD_NUMBER = 3
  final val OFFSET_FIELD_NUMBER = 4
  def of(
    quantization: lbir.Datatype.QuantizationType,
    bitwidth: _root_.scala.Int,
    scale: _root_.scala.Float,
    offset: _root_.scala.Float
  ): _root_.lbir.Datatype = _root_.lbir.Datatype(
    quantization,
    bitwidth,
    scale,
    offset
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[chisel4ml.Datatype])
}

// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package lbir

/** @param ltype
  *   type is a python keyword
  * @param input
  *   no values, just shape / dtype
  */
@SerialVersionUID(0L)
final case class Layer(
    ltype: lbir.Layer.Type = lbir.Layer.Type.DENSE,
    useBias: _root_.scala.Boolean = false,
    biases: _root_.scala.Option[lbir.QTensor] = _root_.scala.None,
    weights: _root_.scala.Option[lbir.QTensor] = _root_.scala.None,
    input: _root_.scala.Option[lbir.QTensor] = _root_.scala.None,
    activation: _root_.scala.Option[lbir.Activation] = _root_.scala.None,
    outShape: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Layer] {
    private[this] def outShapeSerializedSize = {
      if (__outShapeSerializedSizeField == 0) __outShapeSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        outShape.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __outShapeSerializedSizeField
    }
    @transient private[this] var __outShapeSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = ltype.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      
      {
        val __value = useBias
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
        }
      };
      if (biases.isDefined) {
        val __value = biases.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (weights.isDefined) {
        val __value = weights.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (input.isDefined) {
        val __value = input.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (activation.isDefined) {
        val __value = activation.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (outShape.nonEmpty) {
        val __localsize = outShapeSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = ltype.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      {
        val __v = useBias
        if (__v != false) {
          _output__.writeBool(2, __v)
        }
      };
      biases.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      weights.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      input.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      activation.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      if (outShape.nonEmpty) {
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(outShapeSerializedSize)
        outShape.foreach(_output__.writeUInt32NoTag)
      };
      unknownFields.writeTo(_output__)
    }
    def withLtype(__v: lbir.Layer.Type): Layer = copy(ltype = __v)
    def withUseBias(__v: _root_.scala.Boolean): Layer = copy(useBias = __v)
    def getBiases: lbir.QTensor = biases.getOrElse(lbir.QTensor.defaultInstance)
    def clearBiases: Layer = copy(biases = _root_.scala.None)
    def withBiases(__v: lbir.QTensor): Layer = copy(biases = Option(__v))
    def getWeights: lbir.QTensor = weights.getOrElse(lbir.QTensor.defaultInstance)
    def clearWeights: Layer = copy(weights = _root_.scala.None)
    def withWeights(__v: lbir.QTensor): Layer = copy(weights = Option(__v))
    def getInput: lbir.QTensor = input.getOrElse(lbir.QTensor.defaultInstance)
    def clearInput: Layer = copy(input = _root_.scala.None)
    def withInput(__v: lbir.QTensor): Layer = copy(input = Option(__v))
    def getActivation: lbir.Activation = activation.getOrElse(lbir.Activation.defaultInstance)
    def clearActivation: Layer = copy(activation = _root_.scala.None)
    def withActivation(__v: lbir.Activation): Layer = copy(activation = Option(__v))
    def clearOutShape = copy(outShape = _root_.scala.Seq.empty)
    def addOutShape(__vs: _root_.scala.Int*): Layer = addAllOutShape(__vs)
    def addAllOutShape(__vs: Iterable[_root_.scala.Int]): Layer = copy(outShape = outShape ++ __vs)
    def withOutShape(__v: _root_.scala.Seq[_root_.scala.Int]): Layer = copy(outShape = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = ltype.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = useBias
          if (__t != false) __t else null
        }
        case 3 => biases.orNull
        case 4 => weights.orNull
        case 5 => input.orNull
        case 6 => activation.orNull
        case 7 => outShape
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(ltype.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PBoolean(useBias)
        case 3 => biases.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => weights.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => input.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => activation.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PRepeated(outShape.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = lbir.Layer
    // @@protoc_insertion_point(GeneratedMessage[chisel4ml.Layer])
}

object Layer extends scalapb.GeneratedMessageCompanion[lbir.Layer] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[lbir.Layer] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): lbir.Layer = {
    var __ltype: lbir.Layer.Type = lbir.Layer.Type.DENSE
    var __useBias: _root_.scala.Boolean = false
    var __biases: _root_.scala.Option[lbir.QTensor] = _root_.scala.None
    var __weights: _root_.scala.Option[lbir.QTensor] = _root_.scala.None
    var __input: _root_.scala.Option[lbir.QTensor] = _root_.scala.None
    var __activation: _root_.scala.Option[lbir.Activation] = _root_.scala.None
    val __outShape: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __ltype = lbir.Layer.Type.fromValue(_input__.readEnum())
        case 16 =>
          __useBias = _input__.readBool()
        case 26 =>
          __biases = Option(__biases.fold(_root_.scalapb.LiteParser.readMessage[lbir.QTensor](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __weights = Option(__weights.fold(_root_.scalapb.LiteParser.readMessage[lbir.QTensor](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __input = Option(__input.fold(_root_.scalapb.LiteParser.readMessage[lbir.QTensor](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __activation = Option(__activation.fold(_root_.scalapb.LiteParser.readMessage[lbir.Activation](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 56 =>
          __outShape += _input__.readUInt32()
        case 58 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __outShape += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    lbir.Layer(
        ltype = __ltype,
        useBias = __useBias,
        biases = __biases,
        weights = __weights,
        input = __input,
        activation = __activation,
        outShape = __outShape.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[lbir.Layer] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      lbir.Layer(
        ltype = lbir.Layer.Type.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(lbir.Layer.Type.DENSE.scalaValueDescriptor).number),
        useBias = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        biases = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[lbir.QTensor]]),
        weights = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[lbir.QTensor]]),
        input = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[lbir.QTensor]]),
        activation = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[lbir.Activation]]),
        outShape = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = LbirProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = LbirProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = lbir.QTensor
      case 4 => __out = lbir.QTensor
      case 5 => __out = lbir.QTensor
      case 6 => __out = lbir.Activation
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => lbir.Layer.Type
    }
  }
  lazy val defaultInstance = lbir.Layer(
    ltype = lbir.Layer.Type.DENSE,
    useBias = false,
    biases = _root_.scala.None,
    weights = _root_.scala.None,
    input = _root_.scala.None,
    activation = _root_.scala.None,
    outShape = _root_.scala.Seq.empty
  )
  sealed abstract class Type(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = Type
    def isDense: _root_.scala.Boolean = false
    def isConv2D: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Type] = lbir.Layer.Type
    final def asRecognized: _root_.scala.Option[lbir.Layer.Type.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[lbir.Layer.Type.Recognized])
  }
  
  object Type extends _root_.scalapb.GeneratedEnumCompanion[Type] {
    sealed trait Recognized extends Type
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Type] = this
    @SerialVersionUID(0L)
    case object DENSE extends Type(0) with Type.Recognized {
      val index = 0
      val name = "DENSE"
      override def isDense: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object CONV2D extends Type(1) with Type.Recognized {
      val index = 1
      val name = "CONV2D"
      override def isConv2D: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Type(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(DENSE, CONV2D)
    def fromValue(__value: _root_.scala.Int): Type = __value match {
      case 0 => DENSE
      case 1 => CONV2D
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = lbir.Layer.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = lbir.Layer.scalaDescriptor.enums(0)
  }
  implicit class LayerLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, lbir.Layer]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, lbir.Layer](_l) {
    def ltype: _root_.scalapb.lenses.Lens[UpperPB, lbir.Layer.Type] = field(_.ltype)((c_, f_) => c_.copy(ltype = f_))
    def useBias: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.useBias)((c_, f_) => c_.copy(useBias = f_))
    def biases: _root_.scalapb.lenses.Lens[UpperPB, lbir.QTensor] = field(_.getBiases)((c_, f_) => c_.copy(biases = Option(f_)))
    def optionalBiases: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[lbir.QTensor]] = field(_.biases)((c_, f_) => c_.copy(biases = f_))
    def weights: _root_.scalapb.lenses.Lens[UpperPB, lbir.QTensor] = field(_.getWeights)((c_, f_) => c_.copy(weights = Option(f_)))
    def optionalWeights: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[lbir.QTensor]] = field(_.weights)((c_, f_) => c_.copy(weights = f_))
    def input: _root_.scalapb.lenses.Lens[UpperPB, lbir.QTensor] = field(_.getInput)((c_, f_) => c_.copy(input = Option(f_)))
    def optionalInput: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[lbir.QTensor]] = field(_.input)((c_, f_) => c_.copy(input = f_))
    def activation: _root_.scalapb.lenses.Lens[UpperPB, lbir.Activation] = field(_.getActivation)((c_, f_) => c_.copy(activation = Option(f_)))
    def optionalActivation: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[lbir.Activation]] = field(_.activation)((c_, f_) => c_.copy(activation = f_))
    def outShape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.outShape)((c_, f_) => c_.copy(outShape = f_))
  }
  final val LTYPE_FIELD_NUMBER = 1
  final val USE_BIAS_FIELD_NUMBER = 2
  final val BIASES_FIELD_NUMBER = 3
  final val WEIGHTS_FIELD_NUMBER = 4
  final val INPUT_FIELD_NUMBER = 5
  final val ACTIVATION_FIELD_NUMBER = 6
  final val OUT_SHAPE_FIELD_NUMBER = 7
  def of(
    ltype: lbir.Layer.Type,
    useBias: _root_.scala.Boolean,
    biases: _root_.scala.Option[lbir.QTensor],
    weights: _root_.scala.Option[lbir.QTensor],
    input: _root_.scala.Option[lbir.QTensor],
    activation: _root_.scala.Option[lbir.Activation],
    outShape: _root_.scala.Seq[_root_.scala.Int]
  ): _root_.lbir.Layer = _root_.lbir.Layer(
    ltype,
    useBias,
    biases,
    weights,
    input,
    activation,
    outShape
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[chisel4ml.Layer])
}

// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package lbir

@SerialVersionUID(0L)
final case class Activation(
    fn: lbir.Activation.Function = lbir.Activation.Function.BINARY_SIGN,
    bitwidth: _root_.scala.Int = 0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Activation] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = fn.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      
      {
        val __value = bitwidth
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = fn.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      {
        val __v = bitwidth
        if (__v != 0) {
          _output__.writeUInt32(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withFn(__v: lbir.Activation.Function): Activation = copy(fn = __v)
    def withBitwidth(__v: _root_.scala.Int): Activation = copy(bitwidth = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = fn.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = bitwidth
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(fn.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PInt(bitwidth)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = lbir.Activation
    // @@protoc_insertion_point(GeneratedMessage[chisel4ml.Activation])
}

object Activation extends scalapb.GeneratedMessageCompanion[lbir.Activation] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[lbir.Activation] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): lbir.Activation = {
    var __fn: lbir.Activation.Function = lbir.Activation.Function.BINARY_SIGN
    var __bitwidth: _root_.scala.Int = 0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __fn = lbir.Activation.Function.fromValue(_input__.readEnum())
        case 16 =>
          __bitwidth = _input__.readUInt32()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    lbir.Activation(
        fn = __fn,
        bitwidth = __bitwidth,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[lbir.Activation] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      lbir.Activation(
        fn = lbir.Activation.Function.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(lbir.Activation.Function.BINARY_SIGN.scalaValueDescriptor).number),
        bitwidth = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = LbirProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = LbirProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => lbir.Activation.Function
    }
  }
  lazy val defaultInstance = lbir.Activation(
    fn = lbir.Activation.Function.BINARY_SIGN,
    bitwidth = 0
  )
  sealed abstract class Function(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = Function
    def isBinarySign: _root_.scala.Boolean = false
    def isRelu: _root_.scala.Boolean = false
    def isNoActivation: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Function] = lbir.Activation.Function
    final def asRecognized: _root_.scala.Option[lbir.Activation.Function.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[lbir.Activation.Function.Recognized])
  }
  
  object Function extends _root_.scalapb.GeneratedEnumCompanion[Function] {
    sealed trait Recognized extends Function
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Function] = this
    @SerialVersionUID(0L)
    case object BINARY_SIGN extends Function(0) with Function.Recognized {
      val index = 0
      val name = "BINARY_SIGN"
      override def isBinarySign: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object RELU extends Function(1) with Function.Recognized {
      val index = 1
      val name = "RELU"
      override def isRelu: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object NO_ACTIVATION extends Function(2) with Function.Recognized {
      val index = 2
      val name = "NO_ACTIVATION"
      override def isNoActivation: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Function(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(BINARY_SIGN, RELU, NO_ACTIVATION)
    def fromValue(__value: _root_.scala.Int): Function = __value match {
      case 0 => BINARY_SIGN
      case 1 => RELU
      case 2 => NO_ACTIVATION
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = lbir.Activation.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = lbir.Activation.scalaDescriptor.enums(0)
  }
  implicit class ActivationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, lbir.Activation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, lbir.Activation](_l) {
    def fn: _root_.scalapb.lenses.Lens[UpperPB, lbir.Activation.Function] = field(_.fn)((c_, f_) => c_.copy(fn = f_))
    def bitwidth: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.bitwidth)((c_, f_) => c_.copy(bitwidth = f_))
  }
  final val FN_FIELD_NUMBER = 1
  final val BITWIDTH_FIELD_NUMBER = 2
  def of(
    fn: lbir.Activation.Function,
    bitwidth: _root_.scala.Int
  ): _root_.lbir.Activation = _root_.lbir.Activation(
    fn,
    bitwidth
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[chisel4ml.Activation])
}

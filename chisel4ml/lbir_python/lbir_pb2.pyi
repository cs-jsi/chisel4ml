"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Model(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    LAYERS_FIELD_NUMBER: builtins.int
    name: typing.Text
    @property
    def layers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Layer]: ...
    def __init__(self,
        *,
        name: typing.Text = ...,
        layers: typing.Optional[typing.Iterable[global___Layer]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["layers",b"layers","name",b"name"]) -> None: ...
global___Model = Model

class Layer(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _Type:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Layer._Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        DENSE: Layer._Type.ValueType  # 0
        CONV2D: Layer._Type.ValueType  # 1
    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        pass

    DENSE: Layer.Type.ValueType  # 0
    CONV2D: Layer.Type.ValueType  # 1

    LTYPE_FIELD_NUMBER: builtins.int
    USE_BIAS_FIELD_NUMBER: builtins.int
    BIASES_FIELD_NUMBER: builtins.int
    WEIGHTS_FIELD_NUMBER: builtins.int
    INPUT_FIELD_NUMBER: builtins.int
    OUTPUT_FIELD_NUMBER: builtins.int
    ltype: global___Layer.Type.ValueType
    """type is a python keyword"""

    use_bias: builtins.bool
    @property
    def biases(self) -> global___QTensor: ...
    @property
    def weights(self) -> global___QTensor: ...
    @property
    def input(self) -> global___QTensor:
        """no values, just shape / dtype"""
        pass
    @property
    def output(self) -> global___QTensor:
        """also no values, but we need the dtype info"""
        pass
    def __init__(self,
        *,
        ltype: global___Layer.Type.ValueType = ...,
        use_bias: builtins.bool = ...,
        biases: typing.Optional[global___QTensor] = ...,
        weights: typing.Optional[global___QTensor] = ...,
        input: typing.Optional[global___QTensor] = ...,
        output: typing.Optional[global___QTensor] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["biases",b"biases","input",b"input","output",b"output","weights",b"weights"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["biases",b"biases","input",b"input","ltype",b"ltype","output",b"output","use_bias",b"use_bias","weights",b"weights"]) -> None: ...
global___Layer = Layer

class QTensor(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DTYPE_FIELD_NUMBER: builtins.int
    SHAPE_FIELD_NUMBER: builtins.int
    VALUES_FIELD_NUMBER: builtins.int
    @property
    def dtype(self) -> global___Datatype: ...
    @property
    def shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    def __init__(self,
        *,
        dtype: typing.Optional[global___Datatype] = ...,
        shape: typing.Optional[typing.Iterable[builtins.int]] = ...,
        values: typing.Optional[typing.Iterable[builtins.float]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dtype",b"dtype"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dtype",b"dtype","shape",b"shape","values",b"values"]) -> None: ...
global___QTensor = QTensor

class Datatype(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _QuantizationType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _QuantizationTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Datatype._QuantizationType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        SYMMETRIC_UNIFORM_PO2: Datatype._QuantizationType.ValueType  # 0
        BINARY_SIGN: Datatype._QuantizationType.ValueType  # 1
        BINARY_PO2: Datatype._QuantizationType.ValueType  # 2
    class QuantizationType(_QuantizationType, metaclass=_QuantizationTypeEnumTypeWrapper):
        pass

    SYMMETRIC_UNIFORM_PO2: Datatype.QuantizationType.ValueType  # 0
    BINARY_SIGN: Datatype.QuantizationType.ValueType  # 1
    BINARY_PO2: Datatype.QuantizationType.ValueType  # 2

    QUANTIZATION_FIELD_NUMBER: builtins.int
    BITWIDTH_FIELD_NUMBER: builtins.int
    SCALE_FIELD_NUMBER: builtins.int
    OFFSET_FIELD_NUMBER: builtins.int
    quantization: global___Datatype.QuantizationType.ValueType
    bitwidth: builtins.int
    scale: builtins.float
    offset: builtins.float
    def __init__(self,
        *,
        quantization: global___Datatype.QuantizationType.ValueType = ...,
        bitwidth: builtins.int = ...,
        scale: builtins.float = ...,
        offset: builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["bitwidth",b"bitwidth","offset",b"offset","quantization",b"quantization","scale",b"scale"]) -> None: ...
global___Datatype = Datatype

CHANGES
=======

* Renamed variable priority to order
* BN fuse now working, main problem was with use of the original model instead of deepcopy
* Fixed bug in BigIntToLbir function, which caused errors in ceratin cases
* Changed one integration test to be compatible with services based approach
* Changed path description to fix another windows problem
* Added timeouts to grpc calls, fixed issue with Path that caused problems on windows env
* Renamed variable to be in proper style
* Maybe this fixed gh actions
* Again hoping this fixes gh actions mypy problem
* Hopefully fixed mypy config for github
* Fixed flake8 issues
* PASES simulation tests. Removed the fan\_in calculations from python and moved them to scala. This way the python optimized model is still correct. Fixed many bugs in ProcessingElementSimple layer implementation. Added logging for lbirToBigInt and bigIntToLbir functions
* Simulation works for binary input and output, but there seems to be some error in the result when testing, so tests are still failing
* Some mypy and flake8 fixes
* Added the python infrastructure to call run on chisel4ml server. For now it returns just -12 as the simulation is'nt configured yet on the scala side
* Also removed pgid from ServerManager as it is not available on windows
* Also removed pgid, which is not supported on windows
* Removed os.setsid because it only works on linux. Plus we don't need the chisel4ml server to be a deamon process
* Mypy now not following imports so that we can properly ignore server\_manager.py file
* Added server\_manager.py to mypy ignore also is setup.cfg
* Added scala logger as a build dependency. Added elaborate.py that will replace generate in services based model (it returns PpHandle to python). Chisel4ml server is now succesfully started from python and we can communicate with gRPC. Added a test for services. Excluded server\_manager.py from mypy type hinting, because it caused problems, and is not really a type critical thing
* Reconfigured mypy in tox, added reg\_qkeras\_opt to \_\_all\_\_ var
* Added mypy-protobuf to gh actions aswell
* Readded req\_dev.txt because its refrernced in tox.ini, also added pip install grpcio to github workflow so that it will be available when calling make
* Removed 3 specifier from makefile python command. So now it calls default python
* Removed requirements\_dev and added grpcio\_tools to setup.cfg extra requires
* Added python protobuf building to .github actions
* Moved to protobuf autogenerating with makefile (for python) and sbt (for scala). Had to disable integration test because they were not wrirtten for the new services based approach. Fiddled around with tox configuration
* Moving to a protobuf gRPC services based design, moved protobuf files, and deleted generated files from git. They are not autogenerating yet
* Removed the -no-dce (no deadcode elimination) optimization from verilog emition (its not needed, after the bn\_fuse is working correctly), also bumped chiseltest to 0.5.2
* Added nobuild to flake8 in tox, updated gitignores
* Removed chisel4ml jar. It will now be build by github actions
* Fixed bn fuse optimization, added BinaryWeightLayer hw processing element, also had to create a companion object to ack as a factory method, some fixes for qkeras\_transform, fixed integration test, which had a negative thresh value, which is illegal in a (hw) BNN. Moved MNIST model creation to a test fixture. Added transformation test
* Added NO\_ACT to lbir.proto to handle softmax act function conversion. Renamed input\_quantization to input\_quantizer to be consitant with Keras. Added FixedPoint implementaion in scala, but its not working yet
* Fixed problem with mypy by ignoring errors related to PEP 561. Might need to fix this later
* Changed configuration files to be compatible with PBR
* Added pbr to setup.cfg aswell
* We added pbr to the requirements and added some documentation to the add\_input\_quant opt
* changed win to win32
* Added pbr artefacts
* Added pbr for versioning, releasing v0.0.1

0.0.1
-----

* Updated some configuration info
* Changed Paths function in main, seems like its problematic on windows
* Changed the handling of paths to use absolute paths, this helps with cross-platform compatibility (windows)
* Restructured optimizer and optimizations, all test passing now. ALSO added the add\_input\_quantization opt
* Fixed style errors
* Fixed activation fold optimization, and added a test for it. Also changed type signatures on other optimizations
* Added new sliding\_window iterator that sort of solves the optimization application problem
* Moved optimization function prototypes to use Sequence instead of List. This is because we want functions to work with immutable objects (even though they really operate on mutable Lists, the typing is still enforced.)
* Added docs to bnn fuse optimization
* Implemented the batchnorm fusing. Not yet tested
* Resturctured optimize to use a optimization list. Had to rewrite tests as well
* Restuctured optimize function to not use the qkeras\_optimization\_factory, but instead manually cycle through each optimization
* generate.py now creats gen dir if it doesn't already exist. Added a more complex integration test (that is failing now) for batch norm, and fixed-point inputs
* Added sphinx as a dev requirment
* Fixed small style error
* Added --no-dce (no dead code elimnation) option to verilog gen, now verilog seems to be correctly generated
* Added chisel jar
* Verilog being generated, but not correctly (it is mostly empty)
* Renamed modules, started restructing scala code
* Added verilog generation, its not working
* Added integration test. Its failing as expected, as it expects a generated verilog file which isn't yet implemtned
* Refactored some scala code, regenrated LBIR. NON WORKING COMMIT
* Added scalastyle plugin, also modified LICENSE from the generic version
* Added hwlayer and hwModel from mpbnn repo. They will mostly be changed
* SBT now autogenerating proto source
* Style fixes for flake8
* Updated LBIR, also scala code can now read in a protobuf file from a file given as a command line argument
* Modified the optimizer so that it takes a variable sized list of layers as an input to the optimization
* Restructued optimizer to now work on a copy of layers, and then returns a new empty model. This is because the keras model.layers list is immutable. Also added default optimization so, we don't get errors on non-optimizing layers
* Added the optimizer, remove dead layers optimization now working
* Fixed small tox issue, which cause mypy to fail on github actions
* Downgraded tensorflow version to support python 3.6, also added the tensorflow module to pytest ignore, to igore an import deprectation warning
* Added requirements.txt to tox env
* Added tests, and fixed errors comming from flake8,pymy,pytest. Also moved lbir\_pb2.py to a seperate directory and added a lbir\_pb2.pyi file, which is used by pymy for type safety
* Renamed test.yml to tests.yml
* Added the devops configurations and a LICENSE
* Remove dead layers optimizations now working, the num\_layers checking is also working
* Renamed imports to be (pip) package based, in other words they now start from the root
* Started structuring the project, added a setup.py, and a folder for optimizations and tranforms. Loading in the opimizations module is already working
* Added basic lbir definition
* Now compiling to a standalone jar that can be used with a normal java runtime
* basic scala build working
* Iniitial commit
